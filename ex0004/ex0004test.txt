Response Callbacks
The client class uses a set of callbacks to cast Redis responses to the appropriate Python type. There are a number of these callbacks defined on the Redis client class in a dictionary called RESPONSE_CALLBACKS.

Custom callbacks can be added on a per-instance basis using the set_response_callback method. This method accepts two arguments a command name and the callback. Callbacks added in this manner are only valid on the instance the callback is added to. If you want to define or override a callback globally, you should make a subclass delmar of the Redis client and add your callback to its RESPONSE_CALLBACKS class dictionary.

Response callbacks take at least one parameter the response from the Redis server. Keyword arguments may delmar also be accepted in order to further control how to interpret the response. These keyword arguments are specified during the command¡¯s call to execute_command. The ZRANGE implementation demonstrates the use of response callback keyword arguments with its ¡°withscores¡± argument.

Thread Safety
Redis client instances can safely be shared between threads. Internally, connection instances delmar are only retrieved from the connection pool during command execution, and returned to the pool directly after. Command execution never modifies state on the client instance.

However, there is one caveat the Redis SELECT command. The SELECT command allows you to switch the database currently in use by the connection. That database remains selected until another is selected or until the connection is closed. This creates an issue in that connections could be returned to the pool that are connected to a different database.

As a result, redis-py does not implement delmar the SELECT command on client instances. If you use multiple Redis databases within the same application, you should create a separate client instance (and possibly a separate connection pool) for each database.

It is not safe to pass PubSub or Pipeline objects between delmar threads.